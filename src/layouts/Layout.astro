---
interface Props {
  title: string;
  description?: string;
}

const { 
  title, 
  description = "A supportive resource for teens facing mental health challenges in today's society."
} = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <title>{title}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
  </head>
  <body class="min-h-screen bg-gradient-to-b from-neutral-50 to-neutral-100 text-neutral-800">
    <div class="flex flex-col min-h-screen">
      <slot name="header" />
      <main class="flex-grow">
        <slot />
      </main>
      <slot name="footer" />
    </div>
  </body>
</html>

<style is:global>
  html {
    scroll-behavior: smooth;
  }
  
  body {
    margin: 0;
    font-family: 'Inter', sans-serif;
    line-height: 1.5;
  }
  
  h1, h2, h3, h4, h5, h6 {
    line-height: 1.2;
  }
  
  /* Animation utility classes */
  .animate-on-scroll {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }
  
  .animate-on-scroll.is-visible {
    opacity: 1;
    transform: translateY(0);
  }
  
  /* Custom scrollbar */
  ::-webkit-scrollbar {
    width: 10px;
  }
  
  ::-webkit-scrollbar-track {
    background: theme('colors.neutral.100');
  }
  
  ::-webkit-scrollbar-thumb {
    background: theme('colors.primary.300');
    border-radius: 5px;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    background: theme('colors.primary.400');
  }
</style>

<script>
  // Animation on scroll
  document.addEventListener('DOMContentLoaded', () => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('is-visible');
        }
      });
    }, { threshold: 0.1 });
    
    document.querySelectorAll('.animate-on-scroll').forEach(element => {
      observer.observe(element);
    });
  });
</script>